trigger:
  branches:
    include:
    - main
    - stage

resources:
  repositories:
    - repository: self
    - repository: AzureTemplates
      type: git
      name: azure-templates

  pipelines:
  - pipeline: DocumentationPipeline
    source: Documentation
    trigger:
      branches:
        include:
          - main
          - stage
  - pipeline: ProjectPipeline
    source: Project
    trigger:
      branches:
        include:
          - main
          - stage


variables:
  # Container registry service connection established during pipeline creation
  imageRepository: 'rover'
  containerRegistry: 'LCAcollect ACR'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
#  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
#    tag: '$(Build.BuildId)-dev'
#    artifactBranchName: 'refs/heads/stage'
#  ${{ elseif eq(variables['resources.pipeline.DocumentationPipeline.sourceBranch'], 'refs/heads/stage') }}:
#    tag: '$(Build.BuildId)-dev'
#    artifactBranchName: 'refs/heads/stage'
#  ${{ elseif eq(variables['resources.pipeline.ProjectPipeline.sourceBranch'], 'refs/heads/stage') }}:
#    tag: '$(Build.BuildId)-dev'
#    artifactBranchName: 'refs/heads/stage'
#  ${{ else }}:
#    tag: '$(Build.BuildId)'
#    artifactBranchName: 'refs/heads/main'
#    pipelineSourceBranch: '$(resources.pipeline.ProjectPipeline.sourceBranch)'

  # Helm registry
  azureSubscriptionForACR: 'LCAcollect Shared Container Reg'
  containerRegistryName: lcacollect.azurecr.io

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Helm Chart
  chartName: "router"
  workingDirectory: "helm"

stages:
- stage: Deploy
  displayName: Build and Deploy
  jobs:
    - job: Build
      steps:
        - script: |
            if [ $(Build.SourceBranch) = "refs/heads/stage" ]; then
              echo "##vso[task.setvariable variable=artifactBranchName;]refs/heads/stage"
              echo "##vso[task.setvariable variable=tag;isoutput=true]'$(Build.BuildId)-dev'"
            elif [ $(Build.Reason) = ResourceTrigger ]; then
              if [ $(resources.pipeline.ProjectPipeline.sourceBranch) = "refs/heads/stage" ]; then
                echo "##vso[task.setvariable variable=artifactBranchName;]refs/heads/stage"
                echo "##vso[task.setvariable variable=tag;isoutput=true]'$(Build.BuildId)-dev'"
              elif [ $(resources.pipeline.DocumentationPipeline.sourceBranch) = "refs/heads/stage" ]; then
                echo "##vso[task.setvariable variable=artifactBranchName;]refs/heads/stage"
                echo "##vso[task.setvariable variable=tag;isoutput=true]'$(Build.BuildId)-dev'"
              else
                echo "##vso[task.setvariable variable=artifactBranchName;]refs/heads/main"
                echo "##vso[task.setvariable variable=tag;isoutput=true]$(Build.BuildId)"
              fi
            else
              echo "##vso[task.setvariable variable=artifactBranchName;]refs/heads/main"
              echo "##vso[task.setvariable variable=tag;isoutput=true]$(Build.BuildId)"
            fi
          displayName: Set Environment
          name: setEnvironment

        - script: echo '$(Build.SourceBranch)' && echo $(setEnvironment.tag) && echo $(artifactBranchName)
          displayName: Debug

        - script: echo '$(resources.pipeline.ProjectPipeline.sourceBranch)' && echo $(resources.pipeline.DocumentationPipeline.sourceBranch)
          displayName: Debug Pipeline

        - task: DownloadPipelineArtifact@2
          displayName: Download project schema 
          inputs:
            buildType: 'specific'
            project: 'MolioLCAcollect'
            definition: '8'
            buildVersionToDownload: 'latestFromBranch'
            branchName: '$(artifactBranchName)'
            artifactName: 'project.graphql'
            targetPath: '$(Build.SourcesDirectory)/schemas/project/'
            
        - task: DownloadPipelineArtifact@2
          displayName: Download documentation schema
          inputs:
            buildType: 'specific'
            project: 'MolioLCAcollect'
            definition: '7'
            buildVersionToDownload: 'latestFromBranch'
            branchName: '$(artifactBranchName)'
            artifactName: 'documentation.graphql'
            targetPath: '$(Build.SourcesDirectory)/schemas/documentation/'

        - task: Docker@2
          displayName: Build Image
          inputs:
            command: build
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            buildContext: "./"
            containerRegistry: $(containerRegistry)
            arguments: --build-arg BUILD_VERSION=$(tag)
            tags: |
              $(setEnvironment.tag)

        - task: Docker@2
          displayName: Push Image to Registry
          inputs:
            command: push
            repository: $(imageRepository)
            containerRegistry: $(containerRegistry)
            tags: |
              $(setEnvironment.tag)


    - job: Deploy
      displayName: "Deploy Helm Chart"
      dependsOn: Build
      pool:
        vmImage: $(vmImageName)
      variables:
        - group: azureVariables
          tag: $[dependencies.Build.outputs['setEnvironment.tag'])
          helmVersion: "3.9.2"
          chartName: router
          workingDirectory: "helm"
      steps:
        - task: HelmInstaller@0
          inputs:
            helmVersion: $(helmVersion)
            installKubectl: true
        - task: AzureCLI@2
          env:
            REGISTRY_PASSWORD: $(acr-credentials)
            HELM_EXPERIMENTAL_OCI: 1
          inputs:
            scriptType: bash
            azureSubscription: $(azureSubscriptionForACR)
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo $REGISTRY_PASSWORD | helm registry login $(containerRegistryName) --username $(acr-username) --password-stdin
        - script: helm template $(chartName) .
          displayName: Render helm chart
          workingDirectory: $(workingDirectory)
        - script: helm package --version 1.0.$(tag) .
          displayName: Package helm chart
          workingDirectory: $(workingDirectory)
        - script: helm push $(chartName)-1.0.$(tag).tgz oci://$(containerRegistryName)/helm
          displayName: Push helm chart
          env:
            HELM_EXPERIMENTAL_OCI: 1
          workingDirectory: $(workingDirectory)
